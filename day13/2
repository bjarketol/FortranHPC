PROGRAM main
USE master
IMPLICIT NONE

INTEGER :: STATUS(MPI_STATUS_SIZE)
INTEGER :: ierr, rank, nproc
INTEGER :: ndims, dims(2), comm_cart 
INTEGER :: rank_cart, coords_cart(2)
INTEGER :: i_cart, j_cart
INTEGER :: limin, limax, gimin, gimax
INTEGER :: ljmin, ljmax, gjmin, gjmax
INTEGER :: nghbr_top, nghbr_bottom, nghbr_left, nghbr_right

LOGICAL :: periods(2), reorder

PRINT*, "STATUS",STATUS
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~ INITIALIZE MPI ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
CALL MPI_INIT(ierr)
CALL MPI_COMM_RANK(MPI_COMM_WORLD, rank, ierr)
CALL MPI_COMM_SIZE(MPI_COMM_WORLD, nproc, ierr)

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~ SET VARIABLES  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!

nx = 100 + 2
ny = 100 + 2

xmin = 0.0
xmax = 1.0
ymin = 0.0
ymax = 1.0

dx = (xmax-xmin)/(nx-1)
dy = (ymax-ymin)/(ny-1)

f = dx*dy

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~ ALLOCATE AND INITIALIZE GLOBAL ARRAY ~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
ALLOCATE(u_global(nx,ny))

u_global(:,1) = 1.0
u_global(:,ny) = 1.0
u_global(1,:) = 1.0
u_global(nx,:) = 1.0
!DO j = 1, ny
!    DO i = 1,nx
!        u_global(i,j) = float(i)
!    ENDDO
!ENDDO

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~ SET MPI TOPO VARIABLES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
ndims   = 2
dims(1) = 2
dims(2) = 2
periods(1) = .FALSE.
periods(2) = .FALSE.
reorder    = .FALSE.

CALL MPI_CART_CREATE(MPI_COMM_WORLD, ndims, dims, periods, reorder, &
                     comm_cart, ierr)
CALL MPI_COMM_RANK(comm_cart, rank_cart, ierr)
CALL MPI_CART_COORDS(comm_cart, rank_cart, ndims, coords_cart, ierr)

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~ FIND LOCAL DIM/VARS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
lnx = (nx-2)/2 + 2 
lny = (ny-2)/2 + 2

i_cart = coords_cart(1)
j_cart = coords_cart(2)

limin = 1
limax = lnx

ljmin = 1
ljmax = lny

gimin = 1 + i_cart * (lnx-1)
gimax = gimin + (lnx-2) 

gjmin = 1 + j_cart * (lny-1)
gjmax = gjmin + (lny-2)

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~ FIND IMEDIATE NEIGHBOURS AND GLOBAL BOUNDARIES ~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!

CALL MPI_CART_SHIFT(comm_cart,0,1,nghbr_top,nghbr_bottom,ierr)
CALL MPI_CART_SHIFT(comm_cart,1,1,nghbr_left,nghbr_right,ierr)

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~ ALLOCATE AND INITIALIZE LOCAL ARRAY ~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!

ALLOCATE(u(lnx,lny))
DO j = 1,lny
    DO i = 1,lnx
        u(i,j) = u_global(gimin+(i-1),gjmin+(j-1))
    ENDDO
ENDDO

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~ ALLOCATE GHOST ARRAYS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!

ALLOCATE(ghst_top(lny-2))
ALLOCATE(ghst_bottom(lny-2))
ALLOCATE(ghst_left(lnx-2))
ALLOCATE(ghst_right(lnx-2))

!ALLOCATE(ghst_top_out(lny-2))
!ALLOCATE(ghst_bottom_out(lny-2))
!ALLOCATE(ghst_left_out(lnx-2))
!ALLOCATE(ghst_right_out(lnx-2))
!
!ALLOCATE(ghst_top_in(lny-2))
!ALLOCATE(ghst_bottom_in(lny-2))
!ALLOCATE(ghst_left_in(lnx-2))
!ALLOCATE(ghst_right_in(lnx-2))

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~ ALLOCATE AND INITIALIZE LOCAL ARRAY ~~~~~~~~~~~~~~~~~~~~~~~!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!


PRINT*,  u(2,2)
CALL rb_gs()
CALL comm()
CALL rb_gs()
CALL comm()
CALL rb_gs()
CALL comm()
CALL rb_gs()
CALL comm()
PRINT*,  u(2,2)



CALL MPI_FINALIZE(ierr)
CONTAINS

    SUBROUTINE comm() 
    IF (nghbr_top.NE.MPI_PROC_NULL) THEN
        ghst_top(:) = u(1,2:lny-1)
        CALL MPI_SENDRECV_REPLACE(ghst_top, lny-2, MPI_DOUBLE_PRECISION, &
                             nghbr_top, 0, nghbr_top, 0, &
                             comm_cart, STATUS, ierr)
    ENDIF
     
    IF (nghbr_bottom.NE.MPI_PROC_NULL) THEN
        ghst_bottom(:) = u(lnx,2:lny-1)
        CALL MPI_SENDRECV_REPLACE(ghst_bottom, lny-2, MPI_DOUBLE_PRECISION, &
                             nghbr_bottom, 0, nghbr_bottom, 0, &
                             comm_cart, STATUS, ierr)
    ENDIF

    IF (nghbr_right.NE.MPI_PROC_NULL) THEN
        ghst_right(:) = u(2:lnx-1,lny)
        CALL MPI_SENDRECV_REPLACE(ghst_right, lnx-2, MPI_DOUBLE_PRECISION, &
                             nghbr_right, 0, nghbr_right, 0, &
                             comm_cart, STATUS, ierr)
    ENDIF
    
    IF (nghbr_left.NE.MPI_PROC_NULL) THEN
        ghst_left(:) = u(2:lnx-1,1)
        CALL MPI_SENDRECV_REPLACE(ghst_left, lnx-2, MPI_DOUBLE_PRECISION, &
                             nghbr_left, 0, nghbr_left, 0, &
                             comm_cart, STATUS, ierr)
    ENDIF                             

    CALL MPI_BARRIER(comm_cart, ierr)
    
    END SUBROUTINE comm

    SUBROUTINE boundary_conditions()
    !IMPLICIT NONE
    END SUBROUTINE boundary_conditions

    SUBROUTINE rb_gs()
    !IMPLICIT NONE
    DO j=2,lny-1,2
        DO i=3,lnx-1,2
            u(i,j) = one_fourth*(u(i+1,j  ) + &
                                 u(i-1,j  ) + &
                                 u(i  ,j+1) + &
                                 u(i  ,j-1) - &
                                 f)
        ENDDO
    ENDDO
    DO j=3,lny-1,2
        DO i=2,lnx-1,2
            u(i,j) = one_fourth*(u(i+1,j  ) + &
                                 u(i-1,j  ) + &
                                 u(i  ,j+1) + &
                                 u(i  ,j-1) - &
                                 f)
        ENDDO
    ENDDO
    END SUBROUTINE rb_gs
END PROGRAM main
